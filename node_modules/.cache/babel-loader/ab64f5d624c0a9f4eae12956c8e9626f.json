{"ast":null,"code":"var _jsxFileName = \"/home/gautier/Documents/hackloween-quizz-movie/hackloween/src/components/LetsPlay.jsx\";\nimport React from \"react\";\nimport NavBar from \"./NavBar\";\nimport \"./style/LetsPlay.scss\";\nimport GetMovie from \"./GetMovie\";\n\nclass LetsPlay extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.time = () => {\n      if (this.state.count <= 0) {\n        clearInterval(this.counterFunc);\n        return;\n      }\n\n      this.setState({\n        count: this.state.count - 1\n      });\n    };\n\n    this.timeReset = () => {\n      this.setState({\n        count: 20\n      });\n    };\n\n    this.incrementScore = () => {\n      this.setState({\n        ScoreCount: this.state.ScoreCount + this.state.count\n      });\n      clearInterval(this.counterFunc);\n      this.counterFunc = setInterval(this.time, 1000);\n    };\n\n    this.wrong = () => {\n      this.setState({\n        ScoreCount: this.state.ScoreCount - 5\n      });\n    };\n\n    this.blurFunction = (i, j) => {\n      let arr = this.state.blurTab;\n      arr[i][j] = false;\n      this.setState({\n        blurTab: arr\n      });\n      console.log(i, j);\n    };\n\n    this.state = {\n      ScoreCount: 0,\n      blurTab: [[true, true, true], [true, true, true], [true, false, true], [true, true, true]],\n      count: 20\n    };\n    this.counterFunc = setInterval(this.time, 1000);\n  }\n\n  componentDidMount() {\n    for (let k = 2000; k <= 20000; k = k + 2000) {\n      setTimeout(() => {\n        let i = Math.floor(Math.random() * 4);\n        let j = Math.floor(Math.random() * 3);\n        this.blurFunction(i, j);\n      }, k);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"letsPlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      displayScore: this.state.ScoreCount,\n      Scoring: this.incrementScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      id: \"Countdown\",\n      id: \"\".concat(this.state.count) <= 5 ? \"hurryCount\" : \"count\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Remaining time\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), \" \", this.state.count), React.createElement(GetMovie, {\n      wrong: this.wrong,\n      incrementScore: this.incrementScore,\n      timeReset: this.timeReset,\n      time: this.time,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"blurTab\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.state.blurTab.map(row => row.map(column => {\n      return React.createElement(\"div\", {\n        className: column === true ? \"blur\" : \"noBlur\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      });\n    }))), React.createElement(GetMovie, {\n      className: \"quizz\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default LetsPlay;","map":{"version":3,"sources":["/home/gautier/Documents/hackloween-quizz-movie/hackloween/src/components/LetsPlay.jsx"],"names":["React","NavBar","GetMovie","LetsPlay","Component","constructor","props","time","state","count","clearInterval","counterFunc","setState","timeReset","incrementScore","ScoreCount","setInterval","wrong","blurFunction","i","j","arr","blurTab","console","log","componentDidMount","k","setTimeout","Math","floor","random","render","map","row","column"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,uBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA0BnBC,IA1BmB,GA0BZ,MAAM;AACX,UAAI,KAAKC,KAAL,CAAWC,KAAX,IAAoB,CAAxB,EAA2B;AACzBC,QAAAA,aAAa,CAAC,KAAKC,WAAN,CAAb;AACA;AACD;;AACD,WAAKC,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,OAAd;AACD,KAhCkB;;AAAA,SAkCnBI,SAlCmB,GAkCP,MAAM;AAChB,WAAKD,QAAL,CAAc;AACZH,QAAAA,KAAK,EAAE;AADK,OAAd;AAGD,KAtCkB;;AAAA,SAwCnBK,cAxCmB,GAwCF,MAAM;AACrB,WAAKF,QAAL,CAAc;AACZG,QAAAA,UAAU,EAAE,KAAKP,KAAL,CAAWO,UAAX,GAAwB,KAAKP,KAAL,CAAWC;AADnC,OAAd;AAGAC,MAAAA,aAAa,CAAC,KAAKC,WAAN,CAAb;AACA,WAAKA,WAAL,GAAmBK,WAAW,CAAC,KAAKT,IAAN,EAAY,IAAZ,CAA9B;AACD,KA9CkB;;AAAA,SAgDnBU,KAhDmB,GAgDX,MAAM;AACZ,WAAKL,QAAL,CAAc;AACZG,QAAAA,UAAU,EAAE,KAAKP,KAAL,CAAWO,UAAX,GAAwB;AADxB,OAAd;AAGD,KApDkB;;AAAA,SAsDnBG,YAtDmB,GAsDJ,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACvB,UAAIC,GAAG,GAAG,KAAKb,KAAL,CAAWc,OAArB;AACAD,MAAAA,GAAG,CAACF,CAAD,CAAH,CAAOC,CAAP,IAAY,KAAZ;AACA,WAAKR,QAAL,CAAc;AAAEU,QAAAA,OAAO,EAAED;AAAX,OAAd;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYL,CAAZ,EAAeC,CAAf;AACD,KA3DkB;;AAEjB,SAAKZ,KAAL,GAAa;AACXO,MAAAA,UAAU,EAAE,CADD;AAGXO,MAAAA,OAAO,EAAE,CACP,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CADO,EAEP,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAFO,EAGP,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,CAHO,EAIP,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAJO,CAHE;AASXb,MAAAA,KAAK,EAAE;AATI,KAAb;AAWA,SAAKE,WAAL,GAAmBK,WAAW,CAAC,KAAKT,IAAN,EAAY,IAAZ,CAA9B;AACD;;AAEDkB,EAAAA,iBAAiB,GAAG;AAClB,SAAK,IAAIC,CAAC,GAAG,IAAb,EAAmBA,CAAC,IAAI,KAAxB,EAA+BA,CAAC,GAAGA,CAAC,GAAG,IAAvC,EAA6C;AAC3CC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIR,CAAC,GAAGS,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAR;AACA,YAAIV,CAAC,GAAGQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAR;AACA,aAAKZ,YAAL,CAAkBC,CAAlB,EAAqBC,CAArB;AACD,OAJS,EAIPM,CAJO,CAAV;AAKD;AACF;;AAqCDK,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,YAAY,EAAE,KAAKvB,KAAL,CAAWO,UAD3B;AAEE,MAAA,OAAO,EAAE,KAAKD,cAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE;AACE,MAAA,EAAE,EAAC,WADL;AAEE,MAAA,EAAE,EAAE,UAAG,KAAKN,KAAL,CAAWC,KAAd,KAAyB,CAAzB,GAA6B,YAA7B,GAA4C,OAFlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,OAKU,KAAKD,KAAL,CAAWC,KALrB,CALF,EAaE,oBAAC,QAAD;AACE,MAAA,KAAK,EAAE,KAAKQ,KADd;AAEE,MAAA,cAAc,EAAE,KAAKH,cAFvB;AAGE,MAAA,SAAS,EAAE,KAAKD,SAHlB;AAIE,MAAA,IAAI,EAAE,KAAKN,IAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,EAoBE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKC,KAAL,CAAWc,OAAX,CAAmBU,GAAnB,CAAuBC,GAAG,IACzBA,GAAG,CAACD,GAAJ,CAAQE,MAAM,IAAI;AAChB,aACE;AAAK,QAAA,SAAS,EAAEA,MAAM,KAAK,IAAX,GAAkB,MAAlB,GAA2B,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD,KAJD,CADD,CADH,CADF,EAUE,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CApBF,CADF;AAoCD;;AAnGoC;;AAsGvC,eAAe/B,QAAf","sourcesContent":["import React from \"react\";\nimport NavBar from \"./NavBar\";\nimport \"./style/LetsPlay.scss\";\nimport GetMovie from \"./GetMovie\";\n\nclass LetsPlay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ScoreCount: 0,\n\n      blurTab: [\n        [true, true, true],\n        [true, true, true],\n        [true, false, true],\n        [true, true, true]\n      ],\n      count: 20\n    };\n    this.counterFunc = setInterval(this.time, 1000);\n  }\n\n  componentDidMount() {\n    for (let k = 2000; k <= 20000; k = k + 2000) {\n      setTimeout(() => {\n        let i = Math.floor(Math.random() * 4);\n        let j = Math.floor(Math.random() * 3);\n        this.blurFunction(i, j);\n      }, k);\n    }\n  }\n\n  time = () => {\n    if (this.state.count <= 0) {\n      clearInterval(this.counterFunc);\n      return;\n    }\n    this.setState({ count: this.state.count - 1 });\n  };\n\n  timeReset = () => {\n    this.setState({\n      count: 20\n    });\n  };\n\n  incrementScore = () => {\n    this.setState({\n      ScoreCount: this.state.ScoreCount + this.state.count\n    });\n    clearInterval(this.counterFunc);\n    this.counterFunc = setInterval(this.time, 1000);\n  };\n\n  wrong = () => {\n    this.setState({\n      ScoreCount: this.state.ScoreCount - 5\n    });\n  };\n\n  blurFunction = (i, j) => {\n    let arr = this.state.blurTab;\n    arr[i][j] = false;\n    this.setState({ blurTab: arr });\n    console.log(i, j);\n  };\n\n  render() {\n    return (\n      <div className=\"letsPlay\">\n        <NavBar\n          displayScore={this.state.ScoreCount}\n          Scoring={this.incrementScore}\n        />\n        <p\n          id=\"Countdown\"\n          id={`${this.state.count}` <= 5 ? \"hurryCount\" : \"count\"}\n        >\n          Remaining time\n          <br /> {this.state.count}\n        </p>\n\n        <GetMovie\n          wrong={this.wrong}\n          incrementScore={this.incrementScore}\n          timeReset={this.timeReset}\n          time={this.time}\n        />\n\n        <div className=\"container\">\n          <div className=\"blurTab\">\n            {this.state.blurTab.map(row =>\n              row.map(column => {\n                return (\n                  <div className={column === true ? \"blur\" : \"noBlur\"}></div>\n                );\n              })\n            )}\n          </div>\n          <GetMovie className=\"quizz\"></GetMovie>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default LetsPlay;\n"]},"metadata":{},"sourceType":"module"}