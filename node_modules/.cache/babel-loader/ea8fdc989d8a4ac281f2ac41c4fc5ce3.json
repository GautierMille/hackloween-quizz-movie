{"ast":null,"code":"var _jsxFileName = \"/home/gautier/Documents/hackloween-quizz-movie/hackloween/src/components/LetsPlay.jsx\";\nimport React from \"react\";\nimport NavBar from \"./NavBar\";\nimport \"./style/LetsPlay.scss\";\nimport \"./style/LetsPlayDesktop.scss\";\nimport GetMovie from \"./GetMovie\";\nimport { Link } from \"react-router-dom\";\n\nclass LetsPlay extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.blurCase = () => {\n      setInterval(() => {\n        let i = Math.floor(Math.random() * 4);\n        let j = Math.floor(Math.random() * 3);\n        this.blurFunction(i, j);\n      }, 2000);\n    };\n\n    this.time = () => {\n      if (this.state.count <= 0) {\n        clearInterval(this.counterFunc);\n        clearInterval(this.blurCase);\n        return;\n      }\n\n      this.setState({\n        count: this.state.count - 1\n      });\n    };\n\n    this.timeReset = () => {\n      this.setState({\n        count: 20\n      });\n    };\n\n    this.incrementScore = () => {\n      this.setState({\n        ScoreCount: this.state.ScoreCount + this.state.count,\n        launchfunction: true,\n        blurTab: [[true, true, true], [true, true, true], [true, false, true], [true, true, true]],\n        questionNumber: this.state.questionNumber + 1\n      });\n      clearInterval(this.blurCase);\n      clearInterval(this.counterFunc);\n      this.counterFunc = setInterval(this.time, 1000);\n\n      if (this.state.questionNumber === 10) {}\n    };\n\n    this.wrong = () => {\n      this.setState({\n        ScoreCount: this.state.ScoreCount - 5\n      });\n    };\n\n    this.blurFunction = (i, j) => {\n      let arr = this.state.blurTab;\n      arr[i][j] = false;\n      this.setState({\n        blurTab: arr\n      });\n    };\n\n    this.state = {\n      ScoreCount: 0,\n      blurTab: [[true, true, true], [true, true, true], [true, false, true], [true, true, true]],\n      count: 20,\n      launchfunction: true,\n      questionNumber: 0\n    };\n    this.counterFunc = setInterval(this.time, 1000);\n  }\n\n  componentDidMount() {\n    this.blurCase();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"letsPlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      displayScore: this.state.ScoreCount,\n      Scoring: this.incrementScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: this.state.questionNumber < 3 ? \"continue\" : \"endgame\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"End of the game: yoour score is: \", this.state.ScoreCount, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), \"You suck!\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"startagain\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"START AGAIN (and try to make a better score ass***)\")))), React.createElement(\"p\", {\n      id: \"Countdown\",\n      id: \"\".concat(this.state.count) <= 5 ? \"hurryCount\" : \"count\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Remaining time\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), \" \", this.state.count), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"blurTab\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, this.state.blurTab.map(row => row.map(column => {\n      return React.createElement(\"div\", {\n        className: column === true ? \"blur\" : \"noBlur\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      });\n    }))), React.createElement(GetMovie, {\n      className: \"quizz\",\n      wrong: this.wrong,\n      incrementScore: this.incrementScore,\n      timeReset: this.timeReset,\n      time: this.time,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default LetsPlay;","map":{"version":3,"sources":["/home/gautier/Documents/hackloween-quizz-movie/hackloween/src/components/LetsPlay.jsx"],"names":["React","NavBar","GetMovie","Link","LetsPlay","Component","constructor","props","blurCase","setInterval","i","Math","floor","random","j","blurFunction","time","state","count","clearInterval","counterFunc","setState","timeReset","incrementScore","ScoreCount","launchfunction","blurTab","questionNumber","wrong","arr","componentDidMount","render","map","row","column"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport NavBar from \"./NavBar\";\nimport \"./style/LetsPlay.scss\";\nimport \"./style/LetsPlayDesktop.scss\";\nimport GetMovie from \"./GetMovie\";\nimport { Link } from \"react-router-dom\";\n\nclass LetsPlay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ScoreCount: 0,\n\n      blurTab: [\n        [true, true, true],\n        [true, true, true],\n        [true, false, true],\n        [true, true, true]\n      ],\n      count: 20,\n      launchfunction: true,\n      questionNumber: 0\n    };\n    this.counterFunc = setInterval(this.time, 1000);\n  }\n\n  blurCase = () => {\n    setInterval(() => {\n      let i = Math.floor(Math.random() * 4);\n      let j = Math.floor(Math.random() * 3);\n      this.blurFunction(i, j);\n    }, 2000);\n  };\n\n  componentDidMount() {\n    this.blurCase();\n  }\n\n  time = () => {\n    if (this.state.count <= 0) {\n      clearInterval(this.counterFunc);\n      clearInterval(this.blurCase);\n      return;\n    }\n    this.setState({ count: this.state.count - 1 });\n  };\n\n  timeReset = () => {\n    this.setState({\n      count: 20\n    });\n  };\n\n  incrementScore = () => {\n    this.setState({\n      ScoreCount: this.state.ScoreCount + this.state.count,\n      launchfunction: true,\n      blurTab: [\n        [true, true, true],\n        [true, true, true],\n        [true, false, true],\n        [true, true, true]\n      ],\n      questionNumber: this.state.questionNumber + 1\n    });\n    clearInterval(this.blurCase);\n    clearInterval(this.counterFunc);\n    this.counterFunc = setInterval(this.time, 1000);\n    if (this.state.questionNumber === 10) {\n    }\n  };\n\n  wrong = () => {\n    this.setState({\n      ScoreCount: this.state.ScoreCount - 5\n    });\n  };\n\n  blurFunction = (i, j) => {\n    let arr = this.state.blurTab;\n    arr[i][j] = false;\n    this.setState({ blurTab: arr });\n  };\n\n  render() {\n    return (\n      <div className=\"letsPlay\">\n        <NavBar\n          displayScore={this.state.ScoreCount}\n          Scoring={this.incrementScore}\n        />\n        <div className={this.state.questionNumber < 3 ? \"continue\" : \"endgame\"}>\n          End of the game: yoour score is: {this.state.ScoreCount} <br />\n          You suck!\n          <br />\n          <Link to=\"/\">\n            <button className=\"startagain\">\n              <p>START AGAIN (and try to make a better score ass***)</p>\n            </button>\n          </Link>\n        </div>\n        <p\n          id=\"Countdown\"\n          id={`${this.state.count}` <= 5 ? \"hurryCount\" : \"count\"}\n        >\n          Remaining time\n          <br /> {this.state.count}\n        </p>\n        <div className=\"container\">\n          <div className=\"blurTab\">\n            {this.state.blurTab.map(row =>\n              row.map(column => {\n                return (\n                  <div className={column === true ? \"blur\" : \"noBlur\"}></div>\n                );\n              })\n            )}\n          </div>\n          <GetMovie\n            className=\"quizz\"\n            wrong={this.wrong}\n            incrementScore={this.incrementScore}\n            timeReset={this.timeReset}\n            time={this.time}\n          />\n          {/*<GetMovie className=\"quizz\"></GetMovie>*/}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LetsPlay;\n"]},"metadata":{},"sourceType":"module"}